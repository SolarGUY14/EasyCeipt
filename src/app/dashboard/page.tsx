'use client'

import { useEffect, useState } from 'react'
import { useRouter } from 'next/navigation'
import { supabase } from '@/lib/supabase'
import { useAuth } from '@/lib/auth-context'

interface Purchase {
  id: number
  trans_date: string
  vendor: string
  tot_amount: number
  tax: boolean
  describe: string
}

interface UserProfile {
  email: string
  team_name: string
  team_number: string
}

export default function DashboardPage() {
  const [purchases, setPurchases] = useState<Purchase[]>([])
  const [selected, setSelected] = useState<Set<number>>(new Set())
  const [showForm, setShowForm] = useState(false)
  const [form, setForm] = useState({ 
    date: '', 
    vendor_name: '', 
    amount: '', 
    paid_tax: false, 
    description: '' 
  })
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')
  const [userProfile, setUserProfile] = useState<UserProfile | null>(null)
  const [deleting, setDeleting] = useState(false)
  const router = useRouter()
  const { user, loading: authLoading, signOut } = useAuth()

  // Redirect if not authenticated
  useEffect(() => {
    if (!authLoading && !user) {
      router.push('/login')
    }
  }, [user, authLoading, router])

  // Load user profile
  useEffect(() => {
    if (user) {
      loadUserProfile()
      loadPurchases()
    }
  }, [user])

  const loadUserProfile = async () => {
    if (!user) return
    
    try {
      const { data, error } = await supabase
        .from('Users')
        .select('email, team_name, team_number')
        .eq('email', user.email)
        .single()

      if (error) {
        console.error('Error loading user profile:', error)
        // User profile not found - this shouldn't happen if registration worked properly
        setError('User profile not found. Please contact support.')
      } else {
        setUserProfile(data)
      }
    } catch (err) {
      console.error('Error loading user profile:', err)
    }
  }

  const loadPurchases = async () => {
    if (!user) return
    
    try {
      const { data, error } = await supabase
        .from('Purchases')
        .select('*')
        .eq('email', user.email)
        .order('trans_date', { ascending: false })
        .order('id', { ascending: false })

      if (error) {
        setError('Failed to load purchases')
      } else {
        setPurchases(data || [])
      }
    } catch (err) {
      setError('Failed to load purchases')
    }
  }

  const toggleSelect = (id: number) => {
    setSelected(prev => {
      const newSet = new Set(prev)
      if (newSet.has(id)) newSet.delete(id)
      else newSet.add(id)
      return newSet
    })
  }

  const handleInput = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value, type } = e.target
    if (type === 'checkbox') {
      const checked = (e.target as HTMLInputElement).checked
      setForm({ ...form, [name]: checked })
    } else {
      setForm({ ...form, [name]: value })
    }
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setLoading(true)
    setError('')
    
    if (!user) {
      setError('Not authenticated')
      setLoading(false)
      return
    }

    try {
      const purchaseData = {
        email: user.email,
        trans_date: form.date,
        vendor: form.vendor_name,
        tot_amount: parseFloat(form.amount),
        tax: form.paid_tax,
        describe: form.description
        // Note: 'id' will be auto-generated by Supabase
      }
      
      console.log('Attempting to insert purchase data:', purchaseData)
      
      const { data, error } = await supabase
        .from('Purchases')
        .insert(purchaseData)
        .select()
        .single()

      if (error) {
        console.error('Supabase error details:', {
          message: error.message,
          code: error.code,
          details: error.details,
          hint: error.hint
        })
        setError(`Failed to log purchase: ${error.message}`)
      } else {
        console.log('Purchase created successfully:', data)
        setPurchases(prev => [data, ...prev])
        setForm({ 
          date: '', 
          vendor_name: '', 
          amount: '', 
          paid_tax: false, 
          description: '' 
        })
        setShowForm(false)
      }
    } catch (err) {
      console.error('Error creating purchase:', err)
      setError('Failed to log purchase')
    } finally {
      setLoading(false)
    }
  }

  const handleLogout = async () => {
    await signOut()
    router.push('/')
  }

  const handlePurchaseClick = (purchaseId: number) => {
    router.push(`/dashboard/purchase/${purchaseId}`)
  }

  const handleDeleteSelected = async () => {
    if (selected.size === 0) return
    
    const confirmed = confirm(`Are you sure you want to delete ${selected.size} selected purchase${selected.size > 1 ? 's' : ''}? This action cannot be undone.`)
    if (!confirmed) return

    setDeleting(true)
    setError('')
    
    try {
      // Use Supabase client directly for consistency with how purchases are loaded
      const idsToDelete = Array.from(selected)
      
      const { error } = await supabase
        .from('Purchases')
        .delete()
        .in('id', idsToDelete)
        .eq('email', user?.email)
      
      if (error) {
        throw error
      }
      
      // Remove deleted purchases from state
      setPurchases(prev => prev.filter(p => !selected.has(p.id)))
      setSelected(new Set())
      
    } catch (err) {
      console.error('Error deleting purchases:', err)
      setError('Failed to delete some purchases. Please try again.')
    } finally {
      setDeleting(false)
    }
  }

  const handleSelectAll = () => {
    if (selected.size === purchases.length) {
      setSelected(new Set())
    } else {
      setSelected(new Set(purchases.map(p => p.id)))
    }
  }

  if (authLoading) {
    return <div>Loading...</div>
  }

  if (!user) {
    return null
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <h1 className="text-2xl font-bold text-gray-900">
              {userProfile ? `${userProfile.team_name} (Team ${userProfile.team_number}) Dashboard` : 'Dashboard'}
            </h1>
            <button
              className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors duration-200 text-sm font-medium"
              onClick={handleLogout}
            >
              Logout
            </button>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="bg-white rounded-lg shadow-sm border p-6">
          <div className="flex justify-between items-center mb-6">
            <div>
              <h2 className="text-xl font-semibold text-gray-900">Purchase Management</h2>
              {selected.size > 0 && (
                <p className="text-sm text-gray-600 mt-1">
                  {selected.size} purchase{selected.size > 1 ? 's' : ''} selected
                </p>
              )}
            </div>
            <div className="flex items-center space-x-3">
              {selected.size > 0 && (
                <button
                  className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors duration-200 text-sm font-medium flex items-center space-x-2"
                  onClick={handleDeleteSelected}
                  disabled={deleting}
                >
                  {deleting ? (
                    <>
                      <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                      Deleting...
                    </>
                  ) : (
                    <>
                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                      </svg>
                      Delete ({selected.size})
                    </>
                  )}
                </button>
              )}
              <button
                className="px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 transition-colors duration-200 text-sm font-medium"
                onClick={() => setShowForm(f => !f)}
              >
                {showForm ? 'Cancel' : 'Log New Purchase'}
              </button>
            </div>
          </div>
        {showForm && (
          <form className="mb-6 p-4 bg-gray-50 rounded-lg border" onSubmit={handleSubmit}>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
              <div>
                <label className="block text-sm font-medium text-gray-900 mb-1">Purchase Date *</label>
                <input
                  name="date"
                  type="date"
                  value={form.date}
                  onChange={handleInput}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent text-gray-900 placeholder-gray-500"
                  required
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-900 mb-1">Vendor Name *</label>
                <input
                  name="vendor_name"
                  value={form.vendor_name}
                  onChange={handleInput}
                  placeholder="Enter vendor name"
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent text-gray-900 placeholder-gray-500"
                  required
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-900 mb-1">Amount *</label>
                <input
                  name="amount"
                  type="number"
                  value={form.amount}
                  onChange={handleInput}
                  placeholder="0.00"
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent text-gray-900 placeholder-gray-500"
                  required
                  min="0"
                  step="0.01"
                  onBlur={(e) => {
                    const value = parseFloat(e.target.value);
                    if (!isNaN(value)) {
                      setForm(prev => ({ ...prev, amount: value.toFixed(2) }));
                    }
                  }}
                />
              </div>
              <div className="flex items-center">
                <input
                  name="paid_tax"
                  type="checkbox"
                  checked={form.paid_tax}
                  onChange={handleInput}
                  className="h-4 w-4 text-purple-600 focus:ring-purple-500 border-gray-300 rounded"
                />
                <label className="ml-2 text-sm font-medium text-gray-900">
                  Paid Tax
                </label>
              </div>
            </div>
            <div className="mb-4">
              <label className="block text-sm font-medium text-gray-900 mb-1">Description (Optional)</label>
              <textarea
                name="description"
                value={form.description}
                onChange={handleInput}
                placeholder="Enter purchase description..."
                rows={3}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent text-gray-900 placeholder-gray-500"
              />
            </div>
            <button
              type="submit"
              className="px-4 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 transition-colors duration-200 text-sm font-medium"
              disabled={loading}
            >
              {loading ? 'Logging...' : 'Add Purchase'}
            </button>
          </form>
        )}
        
        {error && (
          <div className="mb-4 p-3 bg-red-50 border border-red-200 rounded-md">
            <p className="text-red-600 text-sm">{error}</p>
          </div>
        )}
        
        {purchases.length > 0 && (
          <div className="flex items-center justify-between mb-4 p-3 bg-gray-50 rounded-lg">
            <div className="text-sm text-gray-600">
              {purchases.length} total purchase{purchases.length > 1 ? 's' : ''}
            </div>
            <button
              onClick={handleSelectAll}
              className="text-sm text-purple-600 hover:text-purple-700 font-medium"
            >
              {selected.size === purchases.length ? 'Clear Selection' : 'Select All'}
            </button>
          </div>
        )}
        
        <div className="space-y-3">
          {purchases.map(p => (
            <div key={p.id} className="flex items-center p-4 border border-gray-200 rounded-lg bg-white hover:shadow-md transition-all duration-200">
              <div 
                className="flex-1 cursor-pointer hover:bg-gray-50 rounded-lg p-2 -m-2 transition-colors duration-200 group"
                onClick={() => handlePurchaseClick(p.id)}
                title="Click to view purchase details"
              >
                <div className="font-medium text-gray-900 group-hover:text-purple-700 transition-colors duration-200">{p.vendor}</div>
                <div className="text-sm text-gray-500">
                  ${p.tot_amount.toFixed(2)} &middot; {new Date(p.trans_date).toLocaleDateString()}
                  {p.tax && <span className="ml-2 text-green-600">• Tax Paid</span>}
                </div>
                {p.describe && (
                  <div className="text-sm text-gray-400 mt-1">{p.describe}</div>
                )}
                <div className="text-xs text-gray-400 mt-1 opacity-0 group-hover:opacity-100 transition-opacity duration-200">
                  Click to view details →
                </div>
              </div>
              <button
                className={`ml-4 px-4 py-2 rounded-md border text-sm font-medium transition-colors duration-200 ${
                  selected.has(p.id) 
                    ? 'bg-purple-600 text-white border-purple-600' 
                    : 'bg-white text-purple-600 border-purple-600 hover:bg-purple-50'
                }`}
                onClick={(e) => {
                  e.stopPropagation()
                  toggleSelect(p.id)
                }}
              >
                {selected.has(p.id) ? 'Selected' : 'Select'}
              </button>
            </div>
          ))}
        </div>
        
        {purchases.length === 0 && (
          <div className="text-center py-12">
            <div className="text-gray-400 text-lg">No purchases yet.</div>
            <div className="text-gray-400 text-sm mt-2">Start by logging your first purchase above.</div>
          </div>
        )}
        </div>
      </main>
    </div>
  )
} 